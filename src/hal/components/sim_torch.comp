component sim_torch "A simulated plasma torch";

description
"""

A simulated plasma torch for ark-ok testing.

.I VERSION:
.br
0.1

""";

/* INPUT PINS */
pin in  float   cut_noise_in = 0.75 "the amount of noise during cutting (volts)";
pin in  s32     cycles_in = 200     "the number of cycles that the arc voltage overshoots the cut voltage (cycles)";
pin in  s32     on_delay_in = 10    "the time from turn on until overshoot begins (cycles)";
pin in  float   offset_in           "the cut voltage offset(volts)";
pin in  s32     overshoot_in = 50   "the percentage of the cut voltage that the arc voltage overshoots (percent)";
pin in  float   ramp_noise_in = 5   "the amount of noise during overshoot (volts)";
pin in  s32     ramp_up_in = 80     "percent of 'cycles_in' that the arc voltage ramps up (percent)";
pin in  bit     start               "start the arc";
pin in  float   voltage_in = 100    "the cut voltage (volts)";

/* OUTPUT PINS */
pin out float   voltage_out         "output voltage (volts)";

/* VARIABLES for input validation */
variable float  cut_noise;          /* validated cut noise */
variable int    cycles;             /* validated cycles */
variable int    on_delay;           /* validated on delay */
variable float  offset;             /* validated offset */
variable float  overshoot;          /* validated overshoot */
variable float  ramp_noise;         /* validated ramp noise */
variable float  ramp_up;            /* validated ramp percentage */
variable float  voltage;            /* validated cut voltage */


/* VARIABLES for working */
variable float  angle;              /* current ramp angle */
variable int    current_cycle;      /* current cycle */
variable int    dn_cycles;          /* overshoot ramp down cycles */
variable bool   init;               /* initialized flag */
variable float  initial_ramp = 10;  /* initial ramp up cycles */
variable float  overshoot_max;      /* maximum overshoot voltage */
variable float  overshoot_start;    /* overshoot start voltage */
variable int    up_cycles;          /* overshoot ramp up cycles */

function _;

author "Phillip A Carter";

license "GPLv2 or greater";

option singleton yes;

;;

#include "rtapi_math.h"
#include <stdlib.h>

/* return a random voltage */
float random_float(float volume){
    return (volume * 2) * ((float)rand() / RAND_MAX) - volume;
}

/* return the voltage of the noise */
float noise(int cycle, float volume){
    if(cycle % 5 == 0){
        return random_float(fabs(volume));
    }
    return 0;
}

FUNCTION(_) {

    /* seed the random number generator */
    if(!init){
        srand(fperiod);
        init = 1;
    }

    /* validate the inputs */
    cut_noise = fabs(cut_noise_in);
    cycles = fabs(cycles_in);
    if(on_delay_in < 0){
        on_delay = 0;
    }else if(on_delay_in > 100){
        on_delay = 100;
    }else{
        on_delay = on_delay_in;
    }
    if(offset_in < -10){
        offset = -10;
    }else if(offset_in > 10){
        offset = 10;
    }else{
        offset = offset_in;
    }
    if(overshoot_in < 0){
        overshoot = 0;
    }else if(overshoot_in > 100){
        overshoot = 100;
    }else{
        overshoot = overshoot_in;
    }
    ramp_noise = fabs(ramp_noise_in);
    if(ramp_up_in < 0){
        ramp_up = 0;
    }else if(ramp_up_in > 100){
        ramp_up = 100;
    }else{
        ramp_up = ramp_up_in;
    }
    if(voltage_in < 50){
        voltage = 50;
    }else if(voltage_in > 150){
        voltage = 150;
    }else{
        voltage = voltage_in;
    }

    /* setup some variables */
    up_cycles = cycles * (ramp_up * 0.01);
    dn_cycles = cycles - up_cycles;
    overshoot_max = voltage * (overshoot * 0.01);
    overshoot_start = overshoot_max * 0.4;

    /* start the arc */
    if(start){
        if(current_cycle < cycles){
            /* initial ramp up to cut voltage */
            if(current_cycle < on_delay){
                voltage_out = (voltage + overshoot_start) / on_delay * current_cycle;
            /* ramp up to overshoot voltage */
            }else if (current_cycle <= up_cycles){
                angle = atan2(overshoot_max - overshoot_start, up_cycles);
                voltage_out = voltage + overshoot_start + current_cycle * tan(angle) + noise(current_cycle, ramp_noise);
            }else{
            /* ramp down to cut voltage */
                angle = atan2(overshoot_max, dn_cycles);
                voltage_out = voltage + overshoot_max - (current_cycle - up_cycles) * tan(angle) + noise(current_cycle, ramp_noise);
            }
        /* cut voltage voltage */
        }else{
            voltage_out = voltage + offset + noise(current_cycle, cut_noise);
        }
        current_cycle++;
    /* stop the arc */
    }else{
        current_cycle = 0;
        voltage_out = 0;
    }
}
